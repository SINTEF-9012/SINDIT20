image: python:3.11

stages:
  - test
  - analysis
  - build

variables:
  # Set PROJECT_NAME to the name of the project folder.
  # Do not touch the other variables.
  PROJECT_NAME: sindit
  ROOTDIR: $CI_PROJECT_DIR/projects/$PROJECT_NAME
  RULES_CHANGES_PATH: $ROOTDIR/**/*
  CI_REGISTRY: gitlab.sintef.no:5050
  IMAGE_PATH: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  DOCKER_TLS_CERTDIR: ""

.base-rules:
  rules:
    # Do not run when creating tags
    - if: $CI_COMMIT_TAG
      when: never
    # Always run on default branch (main)
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    # Run on merge requests
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
      allow_failure: false
    # Run when triggered by parent pipeline
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    # Avoid duplicate jobs on merge requests
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # Run if on a branch and not a merge request
    - if: $CI_COMMIT_BRANCH

pytest:
  stage: test
  extends: .base-rules
  before_script:
    - cd projects/$PROJECT_NAME
    - pip install poetry
    - poetry install
  script:
    - pip install junit-xml
    - poetry run pytest --junitxml=junit.xml -m "not slow and not gitlab_exempt"
  artifacts:
    when: always
    expire_in: 1 weeks
    paths:
      - $ROOTDIR/junit.xml
    reports:
      junit: $ROOTDIR/junit.xml

coverage:
  stage: test
  extends: .base-rules
  before_script:
    - cd projects/$PROJECT_NAME
    - pip install poetry
    - poetry install
  dependencies:
    - pytest
  script:
    - pip install coverage
    - pip install coverage-badge
    - poetry run coverage run -m pytest -m "not slow and not gitlab_exempt"
    - coverage report
    - coverage xml -o coverage.xml
    - coverage-badge -o coverage.svg
    - echo $ROOTDIR
    - echo ${PROJECT_NAME}-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  artifacts:
    name: ${PROJECT_NAME}-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}
    expire_in: 1 week
    paths:
      - $ROOTDIR/coverage.xml
      - $ROOTDIR/coverage.svg
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $ROOTDIR/coverage.xml

sonarqube:
  stage: analysis
  extends: .base-rules
  dependencies:
    - coverage
  before_script:
    - cd projects/$PROJECT_NAME
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: $ROOTDIR/.sonar
    GIT_DEPTH: "0"
  cache:
    key: $CI_JOB_NAME
    paths:
      - $ROOTDIR/.sonar/cache
  script:
    - pwd
    - ls -la
    - sonar-scanner
  allow_failure: true

docker-build-sindit:
  stage: build
  extends: .base-rules
  image: docker:latest
  tags:
    - dind
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    IMAGE_NAME: sindit
  allow_failure: false
  before_script:
    - cd projects/$PROJECT_NAME
    - |
      echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY \
      -u $CI_REGISTRY_USER --password-stdin
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --name mybuilder --use
  script:
    docker buildx build
      --push
      --platform linux/amd64,linux/arm64/v8
      --provenance=false
      --label "git-commit-sha=$CI_COMMIT_SHA"
      --label "git-commit-branch=$CI_COMMIT_BRANCH"
      --label "git-commit-timestamp=$CI_COMMIT_TIMESTAMP"
      --label "git-commit-title=$CI_COMMIT_TITLE"
      -t $IMAGE_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
      -t $IMAGE_PATH/$IMAGE_NAME:latest .
  rules:
    - if: $CI_COMMIT_BRANCH == "sindit"
    - if: $CI_COMMIT_BRANCH == "main"

docker-build-graphdb:
  stage: build
  extends: .base-rules
  image: docker:latest
  tags:
    - dind
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    IMAGE_NAME: sindit-graphdb
  allow_failure: false
  before_script:
    - cd projects/$PROJECT_NAME
    - |
      echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY \
      -u $CI_REGISTRY_USER --password-stdin
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --name mybuilder --use
  script:
    docker buildx build
      --push
      --platform linux/arm64/v8,linux/amd64
      --provenance=false
      --label "git-commit-sha=$CI_COMMIT_SHA"
      --label "git-commit-branch=$CI_COMMIT_BRANCH"
      --label "git-commit-timestamp=$CI_COMMIT_TIMESTAMP"
      --label "git-commit-title=$CI_COMMIT_TITLE"
      -t $IMAGE_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
      -t $IMAGE_PATH/$IMAGE_NAME:latest
      ./GraphDB
  rules:
    - if: $CI_COMMIT_BRANCH == "sindit"
    - if: $CI_COMMIT_BRANCH == "main"

push-to-github:
  stage: deploy
  image: alpine/git
  before_script:
    - apk add --no-cache openssh
    - git config --global user.email "ci@sindit.com"
    - git config --global user.name "SINDIT CI"
    # Navigate to the ROOTDIR (sindit project directory)
    - cd $ROOTDIR
    # Initialize a new Git repository for the sindit project
    - git init
    - git remote add github https://$GITHUB_TOKEN@github.com/SINTEF-9012/SINDIT20.git
    - git fetch github
    - git checkout -b sindit || true
    # Add all files from the sindit project directory
    - git add .
    - git commit -m "CI/CD: Sync sindit branch from GitLab to GitHub" || true
  script:
    # Push the sindit branch to GitHub
    - git push -u github sindit --force
  rules:
    - if: $CI_COMMIT_BRANCH == "sindit"